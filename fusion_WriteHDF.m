% fusion_WriteHDF.m
% Version 6.1
% Step 4
% Write Output
%
% Project: Fusion
% By Qinchuan Xin
% Updated By: Xiaojing Tang
% Created On: Unknown
% Last Update: 10/7/2014
%
% Input Arguments: 
%   main (Structure) - main inputs of the fusion process generated by
%     fusion_inputs.m.
%
% Output Arguments: NA
%
% Usage: 
%   1.Customize the main input file (fusion_inputs.m) with proper settings
%       for specific project.
%   2.Run fusion_Inputs() first and get the returned structure of inputs
%   3.Run previous steps first to make sure required data are already
%       generated.
%   4.Run this function with the stucture of inputs as the input argument.
%
% Version 6.0 - Unknown
%   This script generage MODIS swath data based on Landsat synthetic data
%       with BRDF correction.
%
% Updates of Version 6.1 - 10/7/2014 (by Xiaojing Tang)
%   1.Updated comments.
%   2.Changed coding style.
%   3.Modified for work flow of fusion version 6.1.
%   4.Changed from script to function
%   5.Modified the code to incorporate the use of fusion_inputs structure.
%
%----------------------------------------------------------------
%
function fusion_WriteHDF(main)

    % MOD09 Swath Info
    % FileName.Day=datenum(2000,9,27);	% nadir image
    % FileName.Day=datenum(2000,9,12);	% two images
    % FileName.Day=datenum(2000,9,17);	% off-nadir image
    % FileName.Day=datenum(2000,9,26);	% two images

    % start timer
    tic;
    
    % set file path
    FileName.MOD09SUB = main.output.modsubf;
    FileName.MOD09SUBB = main.output.modsubbrdf;
    
    % loop through all existing MOD09SUB files
    for I_Day = 1:numel(main.date.swath)
        
        % construct date string
        Day = main.date.swath(I_Day);
        DayStr = num2str(Day);
        
        % find files
        File.MOD09SUB = dir([FileName.MOD09SUB,'MOD09SUBF.',num2str(main.set.res),'*',DayStr,'*']);
        if numel(File.MOD09SUB) < 1
            disp(['Cannot find MOD09SUBF for Julian Day: ', DayStr]);
            continue;
        end

        % copy original swath data to output location 
        system(['cp ' main.input.swath '*' DayStr '* ' main.output.fusion]);
        
        for I_TIME = 1:numel(File.MOD09SUB)
            
            TimeStr = regexp(File.MOD09SUB(I_TIME).name,'\.','split');
            TimeStr = char(TimeStr(4));

            % load MOD09SUBBRDF
            BRDFlag = main.set.brdf;
            if BRDFlag == 1
                File.MOD09SUBB = dir([main.output.modsubbrdf,'MOD09SUBFB.',num2str(main.set.res),'m.',DayStr,'.',TimeStr,'.mat']);
                if numel(File.MOD09SUB) < 1
                    disp(['Cannot find MOD09SUBFB for Julian Day: ', DayStr]);
                    disp(['Only non-BRDF corrected results are produced for Julian Day: ', DayStr]);
                    BRDFlag = 0;
                end
            end
            
            % load MOD09SUB and MOD09SUBBRDF
            MOD09SUB = load([FileName.MOD09SUB,File.MOD09SUB(I_TIME).name]);
            if BRDFlag == 1 
                MOD09SUBB = load([FileName.MOD09SUBB,File.MOD09SUBB.name]);
            end
            
            % Find HDF file to write
            HDFFile = dir([main.output.fusion,'*',DayStr,'*',TimeStr,'*']);
            if numel(HDFFile) ~= 1
                disp(['Cannot find HDFFile for Julian Day: ', DayStr]);
                continue;
            end

            % Transform
            Dims = size(hdfread([main.output.fusion,HDFFile.name],[num2str(main.set.res),'m Surface Reflectance Band 1']));

            FUS09BLU = ones(Dims)*(-9999);
            FUS09BLU(MOD09SUB.MODLine,MOD09SUB.MODSamp) = MOD09SUB.FUS09BLU;        
            FUS09BLU = int16(FUS09BLU);

            FUS09GRE = ones(Dims)*(-9999);
            FUS09GRE(MOD09SUB.MODLine,MOD09SUB.MODSamp) = MOD09SUB.FUS09GRE;        
            FUS09GRE = int16(FUS09GRE);

            FUS09RED = ones(Dims)*(-9999);
            FUS09RED(MOD09SUB.MODLine,MOD09SUB.MODSamp) = MOD09SUB.FUS09RED;        
            FUS09RED = int16(FUS09RED);

            FUS09NIR = ones(Dims)*(-9999);
            FUS09NIR(MOD09SUB.MODLine,MOD09SUB.MODSamp) = MOD09SUB.FUS09NIR;        
            FUS09NIR = int16(FUS09NIR);
            
            FUS09SWIR = ones(Dims)*(-9999);
            FUS09SWIR(MOD09SUB.MODLine,MOD09SUB.MODSamp) = MOD09SUB.FUS09SWIR;        
            FUS09SWIR = int16(FUS09SWIR);

            FUS09SWIR2 = ones(Dims)*(-9999);
            FUS09SWIR2(MOD09SUB.MODLine,MOD09SUB.MODSamp) = MOD09SUB.FUS09SWIR2;        
            FUS09SWIR2 = int16(FUS09SWIR2);

            % write HDF file
            [~] = writeHDF([main.output.fusion,HDFFile.name],11,FUS09BLU);
            [~] = writeHDF([main.output.fusion,HDFFile.name],12,FUS09GRE);
            [~] = writeHDF([main.output.fusion,HDFFile.name],9,FUS09RED);
            [~] = writeHDF([main.output.fusion,HDFFile.name],10,FUS09NIR);
            [~] = writeHDF([main.output.fusion,HDFFile.name],15,FUS09SWIR);
            [~] = writeHDF([main.output.fusion,HDFFile.name],16,FUS09SWIR2);

            if BRDFlag == 1
            
                FUSB9RED = ones(Dims)*(-9999);
                FUSB9RED(MOD09SUBB.MODLine,MOD09SUBB.MODSamp) = MOD09SUBB.FUSB9RED;        
                FUSB9RED = int16(FUSB9RED);

                FUSB9NIR = ones(Dims)*(-9999);
                FUSB9NIR(MOD09SUBB.MODLine,MOD09SUBB.MODSamp) = MOD09SUBB.FUSB9NIR;        
                FUSB9NIR = int16(FUSB9NIR);

                [~] = writeHDF([main.output.fusion,HDFFile.name],11,FUSB9RED);
                [~] = writeHDF([main.output.fusion,HDFFile.name],12,FUSB9NIR);
            
            end
            
        end

        disp(['Done with ',DayStr,' in ',num2str(toc,'%.f'),' seconds']);
    end

    % done
    
end
