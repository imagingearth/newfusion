% fusion_GenMap.m
% Version 1.1.2
% Step 9
% Generate Map

% Project: New Fusion
% By xjtang
% Created On: 7/7/2014
% Last Update: 11/14/2015
%
% Input Arguments: 
%   main (Structure) - main inputs of the fusion process generated by fusion_inputs.m.
%   
% Output Arguments: NA
%
% Instruction: 
%   1.Customize a config file for your project.
%   2.Run fusion_Inputs() first and get the returned structure of inputs
%   3.Run previous steps first to make sure required data are already generated.
%   4.Run this function with the stucture of inputs as the input argument.
%
% Version 1.0 - 7/7/2015
%   This script generates change map in envi format based on fusion result.
%
% Updates of Version 1.0.1 - 7/13/2015
%   1.Added a new type of map.
%
% Updates of Version 1.0.2 - 7/18/2015
%   1.Added support for new model parameter.
%
% Updates of Version 1.0.3 - 8/18/2015
%   1.Fixed a bug that may cause the script to delete other files.
%
% Updates of Version 1.0.4 - 9/17/2015
%   1.Generaes all maps as a package now.
%   2.Added a check to see if the previous process is completed.
%
% Updates of Version 1.1 - 9/25/2015
%   1.Generates coefficients maps.
%
% Updates of Version 1.1.1 - 10/18/2015
%   1.Pass class codes to core funcion.
%   2.Adjusted according to change in change detection.
%   3.Implement model constants.
%
% Updates of Version 1.1.2 - 11/14/2015
%   1.Adjusted the COEF map output according to change in main model.
%
% Created on Github on 7/7/2015, check Github Commits for updates afterwards.
%----------------------------------------------------------------

function fusion_GenMap(main)
    
    % initialize
    MAP = ones(length(main.etm.line),length(main.etm.sample),4)*main.cons.outna;
    CMAP = ones(length(main.etm.line),length(main.etm.sample),3,length(main.model.band)+1,6)*main.cons.outna;
    CMapName = {'DateOfChange';'MonthOfChange';'ClassMap';'ChangeOnly'};
    CoefName1 = {'Mean';'Std';'Intercept';'Slope';'Rsquared';'RMSE'};
    CoefName2 = {'Pre';'Post';'All'};
    
    % start timer
    tic;
    
    % check if line catch is completed
    Complete.Check = dir([main.output.chgmat 'ts.r*.chg.mat']);
    if numel(Complete.Check)/length(main.etm.line) <= 0.7
        disp('Line cache are not complete, abort.');
        return;  
    end
    
    % line by line processing
    for i = (main.etm.line)'
        
        % check if result exist
        File.Check = dir([main.output.chgmat 'ts.r' num2str(i) '.chg.mat']);
        if numel(File.Check) == 0
            disp([num2str(i) ' line cache does not exist, skip this line.']);
            continue;  
        end
        
        % read input data
        CHG = load([main.output.chgmat 'ts.r' num2str(i) '.chg.mat']);
        
        % processing
        for j = main.etm.sample
            
            % subset data
            X = squeeze(CHG.Data(j,:));
            
            % see if this pixel is eligible
            if max(X) <= 0
                continue
            end
            
            % assign change map result
            MAP(i,j,1) = genMap(X,CHG.Date,1,main.model,main.TSclass,main.LCclass);
            MAP(i,j,2) = genMap(X,CHG.Date,2,main.model,main.TSclass,main.LCclass);
            MAP(i,j,3) = genMap(X,CHG.Date,3,main.model,main.TSclass,main.LCclass);
            MAP(i,j,4) = genMap(X,CHG.Date,4,main.model,main.TSclass,main.LCclass);
            
            % assign coef map result
            CMAP(i,j,:,:,1) = CHG.Coef(1,:,j,:);
            CMAP(i,j,:,:,2) = CHG.Coef(2,:,j,:);
            CMAP(i,j,:,:,3) = CHG.Coef(4,:,j,:);
            CMAP(i,j,:,:,4) = CHG.Coef(5,:,j,:);
            CMAP(i,j,:,:,5) = CHG.Coef(6,:,j,:);
            CMAP(i,j,:,:,6) = CHG.Coef(7,:,j,:);
            
        end 
        
        % clear processed line
        clear 'CHG';
        
        % show progress
        disp(['Done with line ',num2str(i),' in ',num2str(toc,'%.f'),' seconds']);
        
    end
    
    % export change maps
    for i = 1:length(CMapName)
        
        % determine file name
        outFile = [main.output.chgmap CMapName(i)];

        % see if change map already exist
        if exist(outFile,'file')
            disp('Change map already exist, overwrite.')
            system(['rm ',outFile]);
            system(['rm ',[outFile,'.hdr']]);
        end

        % export change map
        enviwrite(outFile,squeeze(MAP(:,:,i)),[main.etm.ulEast,main.etm.ulNorth],main.etm.utm,3,[30,30],'bsq');

    end
        
    % export coef maps
    for i = 1:length(CoefName1)
        for j = 1:length(CoefName2)
            
            % determine file name
            outFile = [main.output.coefmap CoefName1(i) CoefName2(j)];

            % see if change map already exist
            if exist(outFile,'file')
                disp('Coef map already exist, overwrite.')
                system(['rm ',outFile]);
                system(['rm ',[outFile,'.hdr']]);
            end

            % export change map
            enviwrite(outFile,squeeze(CMAP(:,:,j,:,i)),[main.etm.ulEast,main.etm.ulNorth],main.etm.utm,3,[30,30],'bsq');

        end
    end
    
    % done
    
end

