% fusion_WriteETM.m
% Version 1.5.5
% Step 6
% Output Result
%
% Project: New Fusion
% By xjtang
% Created On: 1/28/2015
% Last Update: 2/7/2016
%
% Input Arguments: 
%   main (Structure) - main inputs of the fusion process generated by fusion_inputs.m.
%
% Output Arguments: NA
%
% Instruction: 
%   1.Customize a config file for your project.
%   2.Run fusion_Inputs() first and get the returned structure of inputs
%   3.Run previous steps first to make sure required data are already generated.
%   4.Run this function with the stucture of inputs as the input argument.
%
% Version 1.0 - 1/28/2015
%   This script save DIF and Change image into ETM scale.
%   This script saves the results as an ETM image in ENVI format.
%
% Updates of Version 1.1 - 2/7/2015
%   1.Bugs Fixed.
%   2.Operational.
%
% Updates of Version 1.1.1 - 2/10/2015
%   1.Adjusted output structure that fits CCDC style.
%
% Updates of Version 1.1.2 - 4/2/2015
%   1.Implemented a new option
%   2.Fixed the file name bug.
%   3.nob band is removed
%
% Updates of Version 1.2 - 4/5/2015
%   1.Combined 250 and 500 fusion.
%   2.Include both cloud mask of 250 and 500.
%
% Updates of Version 1.3 - 6/17/2015
%   1.Implemented support for new data structure.
%   2.Include Landsat path and row info in the result.
%
% Updates of Version 1.4 - 7/1/2015
%   1.Changed output file name style.
%   2.Combined two cloud mask.
%
% Updates of Version 1.4.1 - 7/7/2015
%   1.Fixed a bug cause by two digit landsat scene.
%   2.Added new input argument for called function.
%
% Updates of Version 1.5 - 7/9/2015
%   1.Include both 250 and 500 results at the same time.
%
% Updates of Version 1.5.1 - 9/14/2015
%   1.Added a line to release memory.
%
% Updates of Version 1.5.2 - 9/15/2015
%   1.Improved the way the code checks whether result already exist.
%
% Updates of Version 1.5.3 - 10/18/2015
%   1.Implement model constants.
%
% Updates of Version 1.5.4 - 12/12/2015
%   1.Added support for combining terra and aqua.
%   2.Process both terra and aqua by default.
%
% Updates of Version 1.5.5 - 2/7/2016
%   1.Fixed a bug in searching existing results.
%
% Released on Github on 1/30/2015, check Github Commits for updates afterwards.
%----------------------------------------------------------------

function fusion_WriteETM(main)

    % calculate pixel center coordinates
    [Samp,Line] = meshgrid(main.etm.sample,main.etm.line);
    ETMGeo.Northing = main.etm.ulNorth-Line*30+15;
    ETMGeo.Easting = main.etm.ulEast +Samp*30-15;
    [ETMGeo.Lat,ETMGeo.Lon] = utm2deg(ETMGeo.Easting,ETMGeo.Northing,main.etm.utm);
    ETMGeo.Line = main.etm.line;
    ETMGeo.Samp = main.etm.sample;

    % start timer
    tic;
    
    % loop through all etm images
    for I_Day=1:numel(main.date.swath)
        
        % get date information of all images
        Day = main.date.swath(I_Day);
        DayStr = num2str(Day);

        % find MOD09SUB files
        File.MOD09SUB = dir([main.output.modsubd,'M*D','09DIF','*',DayStr,'*']);
        if numel(File.MOD09SUB)<1
            disp(['Cannot find MOD09DIF for Julian Day: ', DayStr]);
            continue;
        end

        % check if result already exist
        File.Check = dir([main.output.dif 'M*D' '*' DayStr '*']);
        if numel(File.Check) >= numel(File.MOD09SUB)
            disp([DayStr ' all files already exist, skip this date.']);
            continue;
        end

        % loop through MOD09SUB file of current date
        for I_TIME = 1:numel(File.MOD09SUB)
            
            % construct time string
            TimeStr = regexp(File.MOD09SUB(I_TIME).name,'\.','split');
            TimeStr = char(TimeStr(4));

            % check current platform
            fileName = char(File.MOD09SUB(I_TIME).name);
            thisPlat = fileName(regexp(fileName,'M.?D'):(regexp(fileName,'M.?D')+2));
            
            % check if result already exist
            output = dir([main.output.dif thisplat '*' DayStr '*' TimeStr '*']);
            if numel(output) >= 1
                disp([DayStr ' files already exist, skip this file.']);
                continue;
            end
            
            % load MOD09SUB
            MOD09SUB = load([main.output.modsubd,File.MOD09SUB(I_TIME).name]);

            % initialize ETM image
            ETMImage = 0*ones([numel(ETMGeo.Line),numel(ETMGeo.Samp),10]);
            
            % generate ETM scale dif map
            if main.set.dif == 0
                [~,ETMImage(:,:,1),~] = swath2etm(MOD09SUB.DIF09BLU500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,ETMImage(:,:,2),~] = swath2etm(MOD09SUB.DIF09GRE500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,ETMImage(:,:,3),~] = swath2etm(MOD09SUB.DIF09RED500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,ETMImage(:,:,4),~] = swath2etm(MOD09SUB.DIF09NIR500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,ETMImage(:,:,5),~] = swath2etm(MOD09SUB.DIF09SWIR500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,ETMImage(:,:,6),~] = swath2etm(MOD09SUB.DIF09SWIR2500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,ETMImage(:,:,7),~] = swath2etm(MOD09SUB.DIF09RED250,MOD09SUB,ETMGeo,250,main.cons.outna);
                [~,ETMImage(:,:,8),~] = swath2etm(MOD09SUB.DIF09NIR250,MOD09SUB,ETMGeo,250,main.cons.outna);
                [~,ETMImage(:,:,9),~] = swath2etm(MOD09SUB.QACloud250,MOD09SUB,ETMGeo,250,main.cons.outna);
                [~,ETMImage(:,:,10),~] = swath2etm(MOD09SUB.QACloud500,MOD09SUB,ETMGeo,500,main.cons.outna);
            else
                [~,~,ETMImage(:,:,1)] = swath2etm(MOD09SUB.DIF09BLU500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,~,ETMImage(:,:,2)] = swath2etm(MOD09SUB.DIF09GRE500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,~,ETMImage(:,:,3)] = swath2etm(MOD09SUB.DIF09RED500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,~,ETMImage(:,:,4)] = swath2etm(MOD09SUB.DIF09NIR500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,~,ETMImage(:,:,5)] = swath2etm(MOD09SUB.DIF09SWIR500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,~,ETMImage(:,:,6)] = swath2etm(MOD09SUB.DIF09SWIR2500,MOD09SUB,ETMGeo,500,main.cons.outna);
                [~,~,ETMImage(:,:,7)] = swath2etm(MOD09SUB.DIF09RED250,MOD09SUB,ETMGeo,250,main.cons.outna);
                [~,~,ETMImage(:,:,8)] = swath2etm(MOD09SUB.DIF09NIR250,MOD09SUB,ETMGeo,250,main.cons.outna);
                [~,ETMImage(:,:,9),~] = swath2etm(MOD09SUB.QACloud250,MOD09SUB,ETMGeo,250,main.cons.outna);
                [~,ETMImage(:,:,10),~] = swath2etm(MOD09SUB.QACloud500,MOD09SUB,ETMGeo,500,main.cons.outna);
            end

            % clean up
            Temp = ETMImage(:,:,9);
            Temp(Temp>0) = 1;
            ETMImage(:,:,9) = Temp;
            Temp = ETMImage(:,:,10);
            Temp(Temp>0) = 1;
            ETMImage(:,:,10) = Temp;
            % Temp = ETMImage(:,:,7);
            % Temp(Temp~=-9999) = Temp(Temp~=-9999)*1000;
            % ETMImage(:,:,7) = Temp;
            ETMImage = int16(ETMImage);
   
            % combine two cloud mask
            % ETMImage(:,:,8) = squeeze(ETMImage(:,:,8))|squeeze(ETMImage(:,:,9));
            % ETMImage(:,:,9) = [];
            
            % save as ENVI imsge
            mkdir([main.output.dif,thisPlat,num2str(main.set.scene(1),'%03d'),num2str(main.set.scene(2),'%03d'),DayStr,'T',TimeStr]);
            enviwrite([main.output.dif,thisPlat,num2str(main.set.scene(1),'%03d'),num2str(main.set.scene(2),'%03d'),DayStr,'T',TimeStr,...
                '/',thisPlat,num2str(main.set.scene(1),'%03d'),num2str(main.set.scene(2),'%03d'),DayStr,'T',TimeStr,'_stack'],...
                ETMImage,[main.etm.ulEast,main.etm.ulNorth],main.etm.utm,2,[30,30],'bip');
            disp(['Done with ',DayStr,' in ',num2str(toc,'%.f'),' seconds']);
            
            % release memory
            clear ETMImage Temp MOD09SUB
        end
    end

    % done
    
end
